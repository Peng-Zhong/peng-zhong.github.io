<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PengZ的博客</title>
    <link>https://peng-zhong.github.io/</link>
    <description>Recent content on PengZ的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 12 May 2020 22:20:44 +0800</lastBuildDate>
    
	<atom:link href="https://peng-zhong.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java I/O流</title>
      <link>https://peng-zhong.github.io/post/blog02/</link>
      <pubDate>Tue, 12 May 2020 22:20:44 +0800</pubDate>
      
      <guid>https://peng-zhong.github.io/post/blog02/</guid>
      <description>I/O流 流(steam)：一种抽象概念，指的是数据的传递形式。IO流就是以流的方式进行输入输出。
代表：字节输入流(InputStream)、字节输出流(OutputStream)、字符输入流(Reader)、字符输出流(Writer)。
字节输入流(InputStream) ​	是一个抽象类，是所有表示输入字节流的超类，实现InputStream的子类必须提供一个方法来返回对输入字节的读取
InputStream实现了Closeable接口，Closeable的close()方法是关闭流并且释放资源，如果流已被关闭，那么调用此方法没有效果。如果不关闭流，将会占用大量资源，因此需要做关闭流的操作，但是在我们写代码的过程中，有时候会忘记去关闭。跟进Closeable。
Closeable接口继承了(拓展了)AutoCloseable接口，AutoCloseable的close()方法把流定义在try()里,在退出try-with-resources块或者说是try,catch或者finally结束的时候，会自动关闭。这种构造确保了释放，避免了可能发生的资源耗尽异常和错误。
抽象方法read()：
​	从输入流中读取下一个字节，返回一个范围在0-255的int整形，当到达流的末端而没有可用的字节，返回-1。方法会阻塞，直到输入数据可用、检测到流的结束或抛出异常。
read（byte b[]）：参数b&amp;ndash;读取数据的缓冲区。返回&amp;ndash;读入缓冲区的总字节数
​	从输入流中读取一些字节并将它们存储到缓冲区数组b中。实际读取的字节数作为整数返回。如果数组b的长度为0，则不读取字节并返回0 ，否则，将尝试读取至少一个字节。当到达流的末端而没有可用的字节，返回-1。此方法会阻塞，直到输入数据可用、检测到文件结束或引发异常。
​	读取的第一个字节放入b[0]，下一个字节放入b[1]，类推。读取的长度不能超过数组b的长度。令K为实际读取的字节数，这些字节将会存储在b[0]到b[k-1]中，留下的元素b[k]到b[b.length-1]不受影响(不变)
​	read（b ）等同于 read（b.0，b.length）
read (byte b[], int off, int len)： b—读取数据的缓冲区、off—在数组b中写入数据的起始偏移量、len—要读取的最大字节数
​	从输入流中读取到len字节的数据到arrav字节中。尝试读取的字节数与Len字节数相同，但读取的字节数可能更小。实际读取的字节数作为整数返回。如果len为零，则不读取字节并返回0，否则，将尝试读取至少一个字节。当到达流的末端而没有可用的字节，返回-1。此方法会阻塞，直到输入数据可用、检测到文件结束或引发异常。
​	取的字节数最多等于Len，读取的第一个字节放入b[off]，下一个字节放入b[off+1]，类推。令k为实际读取的字节数，这些字节将存储在元素b[off]到b[off+K -1]中，而元素b[0]到b[off]和元素b[off+len]到b[b.length]是不受影响的。
skip(long n)：n——要跳过的字节数。
​	跳过当前输入流的n个字节的数据，返回跳过的实际字节数。由于各种原因，skip方法最终可能会跳过一些更小的字节，也可能是0。如果n是负数，那么类Inputstream的skip方法总是返回0，并且不会跳过任何字节。
available()：
​	返回当前输入流可读取(或跳过)的字节数的估计值，而不会被此输入流的方法的下一次调用阻塞。下一个调用可能是同一个线程，也可能是另一个线程。一次读取或跳过这么多字节不会阻塞，但可能会读取或跳过更少的字节。注意，使用此方法的返回值来分配用于保存此流中所有数据的缓冲区永远都是不正确的。
字节输出流(OutputStream) ​	这个抽象类是所有表示字节输出流的类的超类。输出流接受输出字节并将其发送到某个接收器。实现outputstream的子类必须提供一个输出字节的方法。
write(int b)：b—指定字节
​	将指定的字节写入此输出流。写入的一般约定是将一个字节写入输出流。OutputStream的子类必须为这个方法提供一个实现。参数:b—bvte。
write(byte b[])：数组b
​	将长度字节从指定的字节数组写入此输出流。(b. 0， b.length)具有完全相同的效力。
write(byte b[], int off, int len)：:b -数据。off-数据中的起始偏移量。en -要写入的字节数
​	将从偏移开始的指定字节数组中的len字节写入此输出流。
字符输入流(Reader) ​	Reader是所有字符输入流的超类。类似于InputStream，区别在于，Reader输入字符。所以，Reader适用用于读取文本类数据，InputStream用于读取字节类数据。
//部分 public abstract class Reader implements Readable, Closeable { /** *尝试将字符读入指定的字符缓冲区。缓冲区被用作字符的存储库:惟一的 *所做的更改是put操作的结果。没有翻转或执行缓冲区的重绕。 */ public int read(java.</description>
    </item>
    
    <item>
      <title>面试题集合</title>
      <link>https://peng-zhong.github.io/post/blog01/</link>
      <pubDate>Tue, 12 May 2020 22:04:18 +0800</pubDate>
      
      <guid>https://peng-zhong.github.io/post/blog01/</guid>
      <description>笔试 Java 一对兔子，从出生第三个月起，每个月都生一对兔子，小兔子长到第三个月后，每个月又生一对兔子，假如兔子都不死，问M个月时兔子的数量，M为键盘读入的正整数。（请用Java语言作答） long count = 1,add=1; long temp; for (int i = 0; i &amp;lt; 8; i++) { if (i&amp;lt;3){ }else{ temp = count; count = count + add;//当月=上月+上上月  add = temp; } } System.out.println(count*2); SQL </description>
    </item>
    
    <item>
      <title>记录第一次</title>
      <link>https://peng-zhong.github.io/post/blog/</link>
      <pubDate>Mon, 11 May 2020 19:03:24 +0800</pubDate>
      
      <guid>https://peng-zhong.github.io/post/blog/</guid>
      <description>hello 小雪雪 hello 大家 </description>
    </item>
    
  </channel>
</rss>